// Code generated by MockGen. DO NOT EDIT.
// Source: user_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sakaguchi-0725/echo-onion-arch/domain/model"
)

// MockUserFactory is a mock of UserFactory interface.
type MockUserFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUserFactoryMockRecorder
}

// MockUserFactoryMockRecorder is the mock recorder for MockUserFactory.
type MockUserFactoryMockRecorder struct {
	mock *MockUserFactory
}

// NewMockUserFactory creates a new mock instance.
func NewMockUserFactory(ctrl *gomock.Controller) *MockUserFactory {
	mock := &MockUserFactory{ctrl: ctrl}
	mock.recorder = &MockUserFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFactory) EXPECT() *MockUserFactoryMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockUserFactory) CreateNewUser(name, email, role string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", name, email, role)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockUserFactoryMockRecorder) CreateNewUser(name, email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUserFactory)(nil).CreateNewUser), name, email, role)
}
