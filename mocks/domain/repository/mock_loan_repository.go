// Code generated by MockGen. DO NOT EDIT.
// Source: loan_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sakaguchi-0725/echo-onion-arch/domain/model"
	repository "github.com/sakaguchi-0725/echo-onion-arch/domain/repository"
)

// MockLoanRepository is a mock of LoanRepository interface.
type MockLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryMockRecorder
}

// MockLoanRepositoryMockRecorder is the mock recorder for MockLoanRepository.
type MockLoanRepositoryMockRecorder struct {
	mock *MockLoanRepository
}

// NewMockLoanRepository creates a new mock instance.
func NewMockLoanRepository(ctrl *gomock.Controller) *MockLoanRepository {
	mock := &MockLoanRepository{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepository) EXPECT() *MockLoanRepositoryMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockLoanRepository) DeleteByID(id model.LoanID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockLoanRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockLoanRepository)(nil).DeleteByID), id)
}

// FindAll mocks base method.
func (m *MockLoanRepository) FindAll() ([]model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockLoanRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLoanRepository)(nil).FindAll))
}

// FindByFilter mocks base method.
func (m *MockLoanRepository) FindByFilter(filter repository.LoanFilter) ([]model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", filter)
	ret0, _ := ret[0].([]model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *MockLoanRepositoryMockRecorder) FindByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockLoanRepository)(nil).FindByFilter), filter)
}

// FindByID mocks base method.
func (m *MockLoanRepository) FindByID(id model.LoanID) (model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoanRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoanRepository)(nil).FindByID), id)
}

// Insert mocks base method.
func (m *MockLoanRepository) Insert(loan model.Loan) (model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", loan)
	ret0, _ := ret[0].(model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockLoanRepositoryMockRecorder) Insert(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLoanRepository)(nil).Insert), loan)
}

// Update mocks base method.
func (m *MockLoanRepository) Update(loan model.Loan) (model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", loan)
	ret0, _ := ret[0].(model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLoanRepositoryMockRecorder) Update(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoanRepository)(nil).Update), loan)
}
