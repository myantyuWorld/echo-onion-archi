// Code generated by MockGen. DO NOT EDIT.
// Source: auth_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sakaguchi-0725/echo-onion-arch/domain/model"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthUsecase) SignIn(email, password string) (model.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", email, password)
	ret0, _ := ret[0].(model.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthUsecaseMockRecorder) SignIn(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthUsecase)(nil).SignIn), email, password)
}

// SignUpForAdmin mocks base method.
func (m *MockAuthUsecase) SignUpForAdmin(name, email, password string) (model.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpForAdmin", name, email, password)
	ret0, _ := ret[0].(model.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpForAdmin indicates an expected call of SignUpForAdmin.
func (mr *MockAuthUsecaseMockRecorder) SignUpForAdmin(name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpForAdmin", reflect.TypeOf((*MockAuthUsecase)(nil).SignUpForAdmin), name, email, password)
}

// SignUpForGeneral mocks base method.
func (m *MockAuthUsecase) SignUpForGeneral(name, email, password string) (model.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpForGeneral", name, email, password)
	ret0, _ := ret[0].(model.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpForGeneral indicates an expected call of SignUpForGeneral.
func (mr *MockAuthUsecaseMockRecorder) SignUpForGeneral(name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpForGeneral", reflect.TypeOf((*MockAuthUsecase)(nil).SignUpForGeneral), name, email, password)
}
